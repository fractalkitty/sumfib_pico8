pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
-- sumfib
-- a fibonacci matching game

-- initialize cartridge data once at start
cartdata("sumfib")

function _init()
    -- grid dimensions
    grid_rows = 3
    grid_cols = 5
    grid = {}
    
    -- visual settings - increased size and adjusted positioning
    square_size = 23  -- Increased from 16
    padding = 1     -- Slightly increased padding
    start_x = 4     -- Adjusted to center the larger grid
    start_y = 15     -- Moved down slightly to maintain spacing from score
    
    -- game state
    score = 0
    highest_tile = 0
    game_over = false
    
    -- color palette for tiles
    colors = {7,12,14,11,10,9,8,13}
    
    -- load high score and best tile from storage
    high_score = dget(0) or 0
    best_tile = dget(1) or 0
    
    
    
    init_grid()
end

function init_grid()
    -- initialize empty grid
    for row=1,grid_rows do
        grid[row] = {}
        for col=1,grid_cols do
            grid[row][col] = 0
        end
    end
    
    -- add initial tiles
    add_new_tile()
    add_new_tile()
end

function _update()
    if not game_over then
        local moved = false
        
        if btnp(‚¨ÖÔ∏è) then 
            moved = shift_left()
        elseif btnp(‚û°Ô∏è) then
            moved = shift_right()
        elseif btnp(‚¨ÜÔ∏è) then
            moved = shift_up()
        elseif btnp(‚¨áÔ∏è) then
            moved = shift_down()
        end
        
        if moved then
            add_new_tile()
            if is_game_over() then
                game_over = true
            end
        end
        
    else
        if btnp(‚ùé) or btnp(üÖæÔ∏è) then
            -- reset the game
            _init()
            game_over = false
        end
    end
end

function _draw()
    cls(1)
    
    -- draw score and best tile
    print("score:"..score, 4, 4, 7)
    print("best:"..high_score, 70, 4, 7)
    
    -- draw grid
    for row=1,grid_rows do
        for col=1,grid_cols do
            local x = start_x + (col-1)*(square_size+padding)
            local y = start_y + (row-1)*(square_size+padding)
            local val = grid[row][col]
            
            -- draw tile background
            rectfill(x, y, x+square_size-1, y+square_size-1, val == 0 and 5 or colors[val % 8 + 1])
            rect(x, y, x+square_size-1, y+square_size-1, 6)
            
            -- draw number
            if val > 0 then
                local num_str = tostr(val)
                local num_x = x + (square_size - #num_str*4)/2
                local num_y = y + (square_size - 6)/2
                print(num_str, num_x, num_y, 0)
            end
        end
    end
    
    if game_over then
        print("game over!", 44, 100, 7)
        print("press ‚ùé or üÖæÔ∏è", 36, 90, 6)
    end

    -- draw title and current/best tile values on separate lines
    print("sumfib", 4, 120, 7)
    print("tile:"..highest_tile, 70, 113, 7)
    print("best:"..best_tile, 70, 120, 7)
end

function is_fibonacci(n)
    if n == 1 or n == 2 then return true end
    local a, b = 1, 2
    while b < n do
        a, b = b, a + b
    end
    return b == n
end

function is_consecutive_fibonacci(a, b)
    if not a or not b then return false end
    return is_fibonacci(a + b)
end

function update_highest_tile(new_val)
    highest_tile = max(highest_tile, new_val)
    if highest_tile > best_tile then
        best_tile = highest_tile
        dset(1, best_tile)  -- save new best tile to cartridge
    end
end

function shift_left()
    local moved = false
    for row=1,grid_rows do
        local nums = {}
        for col=1,grid_cols do
            if grid[row][col] > 0 then
                add(nums, grid[row][col])
            end
        end
        
        local i = 1
        while i < #nums do
            if is_consecutive_fibonacci(nums[i], nums[i+1]) then
                nums[i] += nums[i+1]
                score += nums[i]
                update_highest_tile(nums[i])
                if score > high_score then
                    high_score = score
                    dset(0, high_score)
                end
                del(nums, nums[i+1])
                moved = true
            else
                i += 1
            end
        end
        
        for col=1,grid_cols do
            local new_val = col <= #nums and nums[col] or 0
            if grid[row][col] != new_val then
                grid[row][col] = new_val
                moved = true
            end
        end
    end
    return moved
end

function shift_right()
    local moved = false
    for row=1,grid_rows do
        local nums = {}
        for col=grid_cols,1,-1 do
            if grid[row][col] > 0 then
                add(nums, grid[row][col])
            end
        end
        
        local i = 1
        while i < #nums do
            if is_consecutive_fibonacci(nums[i], nums[i+1]) then
                nums[i] += nums[i+1]
                score += nums[i]
                update_highest_tile(nums[i])
                if score > high_score then
                    high_score = score
                    dset(0, high_score)
                end
                del(nums, nums[i+1])
                moved = true
            else
                i += 1
            end
        end
        
        for col=1,grid_cols do
            local nums_idx = grid_cols-col+1
            local new_val = nums_idx <= #nums and nums[nums_idx] or 0
            if grid[row][col] != new_val then
                grid[row][col] = new_val
                moved = true
            end
        end
    end
    return moved
end

function shift_up()
    local moved = false
    for col=1,grid_cols do
        local nums = {}
        for row=1,grid_rows do
            if grid[row][col] > 0 then
                add(nums, grid[row][col])
            end
        end
        
        local i = 1
        while i < #nums do
            if is_consecutive_fibonacci(nums[i], nums[i+1]) then
                nums[i] += nums[i+1]
                score += nums[i]
                update_highest_tile(nums[i])
                if score > high_score then
                    high_score = score
                    dset(0, high_score)
                end
                del(nums, nums[i+1])
                moved = true
            else
                i += 1
            end
        end
        
        for row=1,grid_rows do
            local new_val = row <= #nums and nums[row] or 0
            if grid[row][col] != new_val then
                grid[row][col] = new_val
                moved = true
            end
        end
    end
    return moved
end

function shift_down()
    local moved = false
    for col=1,grid_cols do
        local nums = {}
        for row=grid_rows,1,-1 do
            if grid[row][col] > 0 then
                add(nums, grid[row][col])
            end
        end
        
        local i = 1
        while i < #nums do
            if is_consecutive_fibonacci(nums[i], nums[i+1]) then
                nums[i] += nums[i+1]
                score += nums[i]
                update_highest_tile(nums[i])
                if score > high_score then
                    high_score = score
                    dset(0, high_score)
                end
                del(nums, nums[i+1])
                moved = true
            else
                i += 1
            end
        end
        
        for row=1,grid_rows do
            local nums_idx = grid_rows-row+1
            local new_val = nums_idx <= #nums and nums[nums_idx] or 0
            if grid[row][col] != new_val then
                grid[row][col] = new_val
                moved = true
            end
        end
    end
    return moved
end

function add_new_tile()
    local empty = {}
    for row=1,grid_rows do
        for col=1,grid_cols do
            if grid[row][col] == 0 then
                add(empty, {row=row, col=col})
            end
        end
    end
    
    if #empty > 0 then
        local pos = empty[flr(rnd(#empty)) + 1]
        local new_val = flr(rnd(10)) < 8 and 1 or 2
        grid[pos.row][pos.col] = new_val
        update_highest_tile(new_val)
    end
end

function is_game_over()
    -- check for empty tiles
    for row=1,grid_rows do
        for col=1,grid_cols do
            if grid[row][col] == 0 then
                return false
            end
        end
    end
    
    -- check for possible moves
    for row=1,grid_rows do
        for col=1,grid_cols-1 do
            if is_consecutive_fibonacci(grid[row][col], grid[row][col+1]) then
                return false
            end
        end
    end
    
    for col=1,grid_cols do
        for row=1,grid_rows-1 do
            if is_consecutive_fibonacci(grid[row][col], grid[row+1][col]) then
                return false
            end
        end
    end
    
    return true
end



__label__
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111771177117717771777111117771777111111111111111111111111111111111117771777117717771111177717771111111111111111111111111111111
11117111711171717171711117117171717111111111111111111111111111111111117171711171111711171171717171111111111111111111111111111111
11117771711171717711771111117771717111111111111111111111111111111111117711771177711711111177717171111111111111111111111111111111
11111171711171717171711117111171717111111111111111111111111111111111117171711111711711171111717171111111111111111111111111111111
11117711177177117171777111111171777111111111111111111111111111111111117771777177111711111111717771111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11116666666666666666666666616666666666666666666666616666666666666666666666616666666666666666666666616666666666666666666666611111
11116555555555555555555555616555555555555555555555616555555555555555555555616ccccccccccccccccccccc616999999999999999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616ccccccccccccccccccccc616999999999999999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616ccccccccccccccccccccc616999999999999999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616ccccccccccccccccccccc616999999999999999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616ccccccccccccccccccccc616999999999999999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616ccccccccccccccccccccc616999999999999999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616ccccccccccccccccccccc616999999999999999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616cccccccc00ccccccccccc616999999990009999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616ccccccccc0ccccccccccc616999999990999999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616ccccccccc0ccccccccccc616999999990009999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616ccccccccc0ccccccccccc616999999999909999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616cccccccc000cccccccccc616999999990009999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616ccccccccccccccccccccc616999999999999999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616ccccccccccccccccccccc616999999999999999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616ccccccccccccccccccccc616999999999999999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616ccccccccccccccccccccc616999999999999999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616ccccccccccccccccccccc616999999999999999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616ccccccccccccccccccccc616999999999999999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616ccccccccccccccccccccc616999999999999999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616ccccccccccccccccccccc616999999999999999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616ccccccccccccccccccccc616999999999999999999999611111
11116666666666666666666666616666666666666666666666616666666666666666666666616666666666666666666666616666666666666666666666611111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11116666666666666666666666616666666666666666666666616666666666666666666666616666666666666666666666616666666666666666666666611111
11116555555555555555555555616555555555555555555555616555555555555555555555616555555555555555555555616999999999999999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616555555555555555555555616999999999999999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616555555555555555555555616999999999999999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616555555555555555555555616999999999999999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616555555555555555555555616999999999999999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616555555555555555555555616999999999999999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616555555555555555555555616999999999999999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616555555555555555555555616999999990009999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616555555555555555555555616999999990999999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616555555555555555555555616999999990009999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616555555555555555555555616999999999909999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616555555555555555555555616999999990009999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616555555555555555555555616999999999999999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616555555555555555555555616999999999999999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616555555555555555555555616999999999999999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616555555555555555555555616999999999999999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616555555555555555555555616999999999999999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616555555555555555555555616999999999999999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616555555555555555555555616999999999999999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616555555555555555555555616999999999999999999999611111
11116555555555555555555555616555555555555555555555616555555555555555555555616555555555555555555555616999999999999999999999611111
11116666666666666666666666616666666666666666666666616666666666666666666666616666666666666666666666616666666666666666666666611111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11116666666666666666666666616666666666666666666666616666666666666666666666616666666666666666666666616666666666666666666666611111
11116555555555555555555555616bbbbbbbbbbbbbbbbbbbbb616999999999999999999999616999999999999999999999616bbbbbbbbbbbbbbbbbbbbb611111
11116555555555555555555555616bbbbbbbbbbbbbbbbbbbbb616999999999999999999999616999999999999999999999616bbbbbbbbbbbbbbbbbbbbb611111
11116555555555555555555555616bbbbbbbbbbbbbbbbbbbbb616999999999999999999999616999999999999999999999616bbbbbbbbbbbbbbbbbbbbb611111
11116555555555555555555555616bbbbbbbbbbbbbbbbbbbbb616999999999999999999999616999999999999999999999616bbbbbbbbbbbbbbbbbbbbb611111
11116555555555555555555555616bbbbbbbbbbbbbbbbbbbbb616999999999999999999999616999999999999999999999616bbbbbbbbbbbbbbbbbbbbb611111
11116555555555555555555555616bbbbbbbbbbbbbbbbbbbbb616999999999999999999999616999999999999999999999616bbbbbbbbbbbbbbbbbbbbb611111
11116555555555555555555555616bbbbbbbbbbbbbbbbbbbbb616999999999999999999999616999999999999999999999616bbbbbbbbbbbbbbbbbbbbb611111
11116555555555555555555555616bbbbbbbb000bbbbbbbbbb616999999990009999999999616999999009900099999999616bbbbbbbb000bbbbbbbbbb611111
11116555555555555555555555616bbbbbbbbbb0bbbbbbbbbb616999999990999999999999616999999909999099999999616bbbbbbbbbb0bbbbbbbbbb611111
11116555555555555555555555616bbbbbbbbb00bbbbbbbbbb616999999990009999999999616999999909990099999999616bbbbbbbbb00bbbbbbbbbb611111
11116555555555555555555555616bbbbbbbbbb0bbbbbbbbbb616999999999909999999999616999999909999099999999616bbbbbbbbbb0bbbbbbbbbb611111
11116555555555555555555555616bbbbbbbb000bbbbbbbbbb616999999990009999999999616999999000900099999999616bbbbbbbb000bbbbbbbbbb611111
11116555555555555555555555616bbbbbbbbbbbbbbbbbbbbb616999999999999999999999616999999999999999999999616bbbbbbbbbbbbbbbbbbbbb611111
11116555555555555555555555616bbbbbbbbbbbbbbbbbbbbb616999999999999999999999616999999999999999999999616bbbbbbbbbbbbbbbbbbbbb611111
11116555555555555555555555616bbbbbbbbbbbbbbbbbbbbb616999999999999999999999616999999999999999999999616bbbbbbbbbbbbbbbbbbbbb611111
11116555555555555555555555616bbbbbbbbbbbbbbbbbbbbb616999999999999999999999616999999999999999999999616bbbbbbbbbbbbbbbbbbbbb611111
11116555555555555555555555616bbbbbbbbbbbbbbbbbbbbb616999999999999999999999616999999999999999999999616bbbbbbbbbbbbbbbbbbbbb611111
11116555555555555555555555616bbbbbbbbbbbbbbbbbbbbb616999999999999999999999616999999999999999999999616bbbbbbbbbbbbbbbbbbbbb611111
11116555555555555555555555616bbbbbbbbbbbbbbbbbbbbb616999999999999999999999616999999999999999999999616bbbbbbbbbbbbbbbbbbbbb611111
11116555555555555555555555616bbbbbbbbbbbbbbbbbbbbb616999999999999999999999616999999999999999999999616bbbbbbbbbbbbbbbbbbbbb611111
11116555555555555555555555616bbbbbbbbbbbbbbbbbbbbb616999999999999999999999616999999999999999999999616bbbbbbbbbbbbbbbbbbbbb611111
11116666666666666666666666616666666666666666666666616666666666666666666666616666666666666666666666616666666666666666666666611111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111117771777171117771111177117771111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111711171171117111171117111171111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111711171171117711111117111771111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111711171171117111171117111171111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111711777177717771111177717771111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111771717177717771777177711111111111111111111111111111111111111111117771777117717771111177117771111111111111111111111111111111
11117111717177717111171171711111111111111111111111111111111111111111117171711171111711171117111171111111111111111111111111111111
11117771717171717711171177111111111111111111111111111111111111111111117711771177711711111117111771111111111111111111111111111111
11111171717171717111171171711111111111111111111111111111111111111111117171711111711711171117111171111111111111111111111111111111
11117711177171717111777177711111111111111111111111111111111111111111117771777177111711111177717771111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111

